// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.intel.analytics.zoo.serving.grpc

/** The response message containing the greetings
  */
@SerialVersionUID(0L)
final case class MetricsReply(
    metrics: _root_.scala.Seq[com.intel.analytics.zoo.serving.grpc.MetricsReply.Metric] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[MetricsReply] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      metrics.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      metrics.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def clearMetrics = copy(metrics = _root_.scala.Seq.empty)
    def addMetrics(__vs: com.intel.analytics.zoo.serving.grpc.MetricsReply.Metric*): MetricsReply = addAllMetrics(__vs)
    def addAllMetrics(__vs: Iterable[com.intel.analytics.zoo.serving.grpc.MetricsReply.Metric]): MetricsReply = copy(metrics = metrics ++ __vs)
    def withMetrics(__v: _root_.scala.Seq[com.intel.analytics.zoo.serving.grpc.MetricsReply.Metric]): MetricsReply = copy(metrics = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => metrics
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(metrics.iterator.map(_.toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.intel.analytics.zoo.serving.grpc.MetricsReply
    // @@protoc_insertion_point(GeneratedMessage[grpc.MetricsReply])
}

object MetricsReply extends scalapb.GeneratedMessageCompanion[com.intel.analytics.zoo.serving.grpc.MetricsReply] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.intel.analytics.zoo.serving.grpc.MetricsReply] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.intel.analytics.zoo.serving.grpc.MetricsReply = {
    val __metrics: _root_.scala.collection.immutable.VectorBuilder[com.intel.analytics.zoo.serving.grpc.MetricsReply.Metric] = new _root_.scala.collection.immutable.VectorBuilder[com.intel.analytics.zoo.serving.grpc.MetricsReply.Metric]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __metrics += _root_.scalapb.LiteParser.readMessage[com.intel.analytics.zoo.serving.grpc.MetricsReply.Metric](_input__)
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    com.intel.analytics.zoo.serving.grpc.MetricsReply(
        metrics = __metrics.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.intel.analytics.zoo.serving.grpc.MetricsReply] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      com.intel.analytics.zoo.serving.grpc.MetricsReply(
        metrics = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[com.intel.analytics.zoo.serving.grpc.MetricsReply.Metric]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = FrontEndGRPCProto.javaDescriptor.getMessageTypes().get(4)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = FrontEndGRPCProto.scalaDescriptor.messages(4)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = com.intel.analytics.zoo.serving.grpc.MetricsReply.Metric
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      _root_.com.intel.analytics.zoo.serving.grpc.MetricsReply.Metric
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.intel.analytics.zoo.serving.grpc.MetricsReply(
    metrics = _root_.scala.Seq.empty
  )
  @SerialVersionUID(0L)
  final case class Metric(
      name: _root_.scala.Predef.String = "",
      count: _root_.scala.Long = 0L,
      meanRate: _root_.scala.Double = 0.0,
      min: _root_.scala.Long = 0L,
      max: _root_.scala.Long = 0L,
      mean: _root_.scala.Double = 0.0,
      median: _root_.scala.Double = 0.0,
      stdDev: _root_.scala.Double = 0.0,
      `75ThPercentile`: _root_.scala.Double = 0.0,
      `95ThPercentile`: _root_.scala.Double = 0.0,
      `98ThPercentile`: _root_.scala.Double = 0.0,
      `99ThPercentile`: _root_.scala.Double = 0.0,
      `999ThPercentile`: _root_.scala.Double = 0.0,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Metric] {
      @transient
      private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      private[this] def __computeSerializedValue(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = name
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        
        {
          val __value = count
          if (__value != 0L) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(2, __value)
          }
        };
        
        {
          val __value = meanRate
          if (__value != 0.0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(3, __value)
          }
        };
        
        {
          val __value = min
          if (__value != 0L) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(4, __value)
          }
        };
        
        {
          val __value = max
          if (__value != 0L) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(5, __value)
          }
        };
        
        {
          val __value = mean
          if (__value != 0.0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(6, __value)
          }
        };
        
        {
          val __value = median
          if (__value != 0.0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(7, __value)
          }
        };
        
        {
          val __value = stdDev
          if (__value != 0.0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(8, __value)
          }
        };
        
        {
          val __value = `75ThPercentile`
          if (__value != 0.0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(9, __value)
          }
        };
        
        {
          val __value = `95ThPercentile`
          if (__value != 0.0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(10, __value)
          }
        };
        
        {
          val __value = `98ThPercentile`
          if (__value != 0.0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(11, __value)
          }
        };
        
        {
          val __value = `99ThPercentile`
          if (__value != 0.0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(12, __value)
          }
        };
        
        {
          val __value = `999ThPercentile`
          if (__value != 0.0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(13, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = name
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        {
          val __v = count
          if (__v != 0L) {
            _output__.writeInt64(2, __v)
          }
        };
        {
          val __v = meanRate
          if (__v != 0.0) {
            _output__.writeDouble(3, __v)
          }
        };
        {
          val __v = min
          if (__v != 0L) {
            _output__.writeInt64(4, __v)
          }
        };
        {
          val __v = max
          if (__v != 0L) {
            _output__.writeInt64(5, __v)
          }
        };
        {
          val __v = mean
          if (__v != 0.0) {
            _output__.writeDouble(6, __v)
          }
        };
        {
          val __v = median
          if (__v != 0.0) {
            _output__.writeDouble(7, __v)
          }
        };
        {
          val __v = stdDev
          if (__v != 0.0) {
            _output__.writeDouble(8, __v)
          }
        };
        {
          val __v = `75ThPercentile`
          if (__v != 0.0) {
            _output__.writeDouble(9, __v)
          }
        };
        {
          val __v = `95ThPercentile`
          if (__v != 0.0) {
            _output__.writeDouble(10, __v)
          }
        };
        {
          val __v = `98ThPercentile`
          if (__v != 0.0) {
            _output__.writeDouble(11, __v)
          }
        };
        {
          val __v = `99ThPercentile`
          if (__v != 0.0) {
            _output__.writeDouble(12, __v)
          }
        };
        {
          val __v = `999ThPercentile`
          if (__v != 0.0) {
            _output__.writeDouble(13, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def withName(__v: _root_.scala.Predef.String): Metric = copy(name = __v)
      def withCount(__v: _root_.scala.Long): Metric = copy(count = __v)
      def withMeanRate(__v: _root_.scala.Double): Metric = copy(meanRate = __v)
      def withMin(__v: _root_.scala.Long): Metric = copy(min = __v)
      def withMax(__v: _root_.scala.Long): Metric = copy(max = __v)
      def withMean(__v: _root_.scala.Double): Metric = copy(mean = __v)
      def withMedian(__v: _root_.scala.Double): Metric = copy(median = __v)
      def withStdDev(__v: _root_.scala.Double): Metric = copy(stdDev = __v)
      def with75ThPercentile(__v: _root_.scala.Double): Metric = copy(`75ThPercentile` = __v)
      def with95ThPercentile(__v: _root_.scala.Double): Metric = copy(`95ThPercentile` = __v)
      def with98ThPercentile(__v: _root_.scala.Double): Metric = copy(`98ThPercentile` = __v)
      def with99ThPercentile(__v: _root_.scala.Double): Metric = copy(`99ThPercentile` = __v)
      def with999ThPercentile(__v: _root_.scala.Double): Metric = copy(`999ThPercentile` = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = name
            if (__t != "") __t else null
          }
          case 2 => {
            val __t = count
            if (__t != 0L) __t else null
          }
          case 3 => {
            val __t = meanRate
            if (__t != 0.0) __t else null
          }
          case 4 => {
            val __t = min
            if (__t != 0L) __t else null
          }
          case 5 => {
            val __t = max
            if (__t != 0L) __t else null
          }
          case 6 => {
            val __t = mean
            if (__t != 0.0) __t else null
          }
          case 7 => {
            val __t = median
            if (__t != 0.0) __t else null
          }
          case 8 => {
            val __t = stdDev
            if (__t != 0.0) __t else null
          }
          case 9 => {
            val __t = `75ThPercentile`
            if (__t != 0.0) __t else null
          }
          case 10 => {
            val __t = `95ThPercentile`
            if (__t != 0.0) __t else null
          }
          case 11 => {
            val __t = `98ThPercentile`
            if (__t != 0.0) __t else null
          }
          case 12 => {
            val __t = `99ThPercentile`
            if (__t != 0.0) __t else null
          }
          case 13 => {
            val __t = `999ThPercentile`
            if (__t != 0.0) __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(name)
          case 2 => _root_.scalapb.descriptors.PLong(count)
          case 3 => _root_.scalapb.descriptors.PDouble(meanRate)
          case 4 => _root_.scalapb.descriptors.PLong(min)
          case 5 => _root_.scalapb.descriptors.PLong(max)
          case 6 => _root_.scalapb.descriptors.PDouble(mean)
          case 7 => _root_.scalapb.descriptors.PDouble(median)
          case 8 => _root_.scalapb.descriptors.PDouble(stdDev)
          case 9 => _root_.scalapb.descriptors.PDouble(`75ThPercentile`)
          case 10 => _root_.scalapb.descriptors.PDouble(`95ThPercentile`)
          case 11 => _root_.scalapb.descriptors.PDouble(`98ThPercentile`)
          case 12 => _root_.scalapb.descriptors.PDouble(`99ThPercentile`)
          case 13 => _root_.scalapb.descriptors.PDouble(`999ThPercentile`)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion = com.intel.analytics.zoo.serving.grpc.MetricsReply.Metric
      // @@protoc_insertion_point(GeneratedMessage[grpc.MetricsReply.Metric])
  }
  
  object Metric extends scalapb.GeneratedMessageCompanion[com.intel.analytics.zoo.serving.grpc.MetricsReply.Metric] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.intel.analytics.zoo.serving.grpc.MetricsReply.Metric] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.intel.analytics.zoo.serving.grpc.MetricsReply.Metric = {
      var __name: _root_.scala.Predef.String = ""
      var __count: _root_.scala.Long = 0L
      var __meanRate: _root_.scala.Double = 0.0
      var __min: _root_.scala.Long = 0L
      var __max: _root_.scala.Long = 0L
      var __mean: _root_.scala.Double = 0.0
      var __median: _root_.scala.Double = 0.0
      var __stdDev: _root_.scala.Double = 0.0
      var __75ThPercentile: _root_.scala.Double = 0.0
      var __95ThPercentile: _root_.scala.Double = 0.0
      var __98ThPercentile: _root_.scala.Double = 0.0
      var __99ThPercentile: _root_.scala.Double = 0.0
      var __999ThPercentile: _root_.scala.Double = 0.0
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __name = _input__.readStringRequireUtf8()
          case 16 =>
            __count = _input__.readInt64()
          case 25 =>
            __meanRate = _input__.readDouble()
          case 32 =>
            __min = _input__.readInt64()
          case 40 =>
            __max = _input__.readInt64()
          case 49 =>
            __mean = _input__.readDouble()
          case 57 =>
            __median = _input__.readDouble()
          case 65 =>
            __stdDev = _input__.readDouble()
          case 73 =>
            __75ThPercentile = _input__.readDouble()
          case 81 =>
            __95ThPercentile = _input__.readDouble()
          case 89 =>
            __98ThPercentile = _input__.readDouble()
          case 97 =>
            __99ThPercentile = _input__.readDouble()
          case 105 =>
            __999ThPercentile = _input__.readDouble()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      com.intel.analytics.zoo.serving.grpc.MetricsReply.Metric(
          name = __name,
          count = __count,
          meanRate = __meanRate,
          min = __min,
          max = __max,
          mean = __mean,
          median = __median,
          stdDev = __stdDev,
          `75ThPercentile` = __75ThPercentile,
          `95ThPercentile` = __95ThPercentile,
          `98ThPercentile` = __98ThPercentile,
          `99ThPercentile` = __99ThPercentile,
          `999ThPercentile` = __999ThPercentile,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[com.intel.analytics.zoo.serving.grpc.MetricsReply.Metric] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        com.intel.analytics.zoo.serving.grpc.MetricsReply.Metric(
          name = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          count = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
          meanRate = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Double]).getOrElse(0.0),
          min = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
          max = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
          mean = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Double]).getOrElse(0.0),
          median = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Double]).getOrElse(0.0),
          stdDev = __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scala.Double]).getOrElse(0.0),
          `75ThPercentile` = __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).map(_.as[_root_.scala.Double]).getOrElse(0.0),
          `95ThPercentile` = __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).map(_.as[_root_.scala.Double]).getOrElse(0.0),
          `98ThPercentile` = __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).map(_.as[_root_.scala.Double]).getOrElse(0.0),
          `99ThPercentile` = __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).map(_.as[_root_.scala.Double]).getOrElse(0.0),
          `999ThPercentile` = __fieldsMap.get(scalaDescriptor.findFieldByNumber(13).get).map(_.as[_root_.scala.Double]).getOrElse(0.0)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = com.intel.analytics.zoo.serving.grpc.MetricsReply.javaDescriptor.getNestedTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = com.intel.analytics.zoo.serving.grpc.MetricsReply.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = com.intel.analytics.zoo.serving.grpc.MetricsReply.Metric(
      name = "",
      count = 0L,
      meanRate = 0.0,
      min = 0L,
      max = 0L,
      mean = 0.0,
      median = 0.0,
      stdDev = 0.0,
      `75ThPercentile` = 0.0,
      `95ThPercentile` = 0.0,
      `98ThPercentile` = 0.0,
      `99ThPercentile` = 0.0,
      `999ThPercentile` = 0.0
    )
    implicit class MetricLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.intel.analytics.zoo.serving.grpc.MetricsReply.Metric]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.intel.analytics.zoo.serving.grpc.MetricsReply.Metric](_l) {
      def name: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.name)((c_, f_) => c_.copy(name = f_))
      def count: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.count)((c_, f_) => c_.copy(count = f_))
      def meanRate: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Double] = field(_.meanRate)((c_, f_) => c_.copy(meanRate = f_))
      def min: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.min)((c_, f_) => c_.copy(min = f_))
      def max: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.max)((c_, f_) => c_.copy(max = f_))
      def mean: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Double] = field(_.mean)((c_, f_) => c_.copy(mean = f_))
      def median: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Double] = field(_.median)((c_, f_) => c_.copy(median = f_))
      def stdDev: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Double] = field(_.stdDev)((c_, f_) => c_.copy(stdDev = f_))
      def `75ThPercentile`: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Double] = field(_.`75ThPercentile`)((c_, f_) => c_.copy(`75ThPercentile` = f_))
      def `95ThPercentile`: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Double] = field(_.`95ThPercentile`)((c_, f_) => c_.copy(`95ThPercentile` = f_))
      def `98ThPercentile`: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Double] = field(_.`98ThPercentile`)((c_, f_) => c_.copy(`98ThPercentile` = f_))
      def `99ThPercentile`: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Double] = field(_.`99ThPercentile`)((c_, f_) => c_.copy(`99ThPercentile` = f_))
      def `999ThPercentile`: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Double] = field(_.`999ThPercentile`)((c_, f_) => c_.copy(`999ThPercentile` = f_))
    }
    final val NAME_FIELD_NUMBER = 1
    final val COUNT_FIELD_NUMBER = 2
    final val MEANRATE_FIELD_NUMBER = 3
    final val MIN_FIELD_NUMBER = 4
    final val MAX_FIELD_NUMBER = 5
    final val MEAN_FIELD_NUMBER = 6
    final val MEDIAN_FIELD_NUMBER = 7
    final val STDDEV_FIELD_NUMBER = 8
    final val _75THPERCENTILE_FIELD_NUMBER = 9
    final val _95THPERCENTILE_FIELD_NUMBER = 10
    final val _98THPERCENTILE_FIELD_NUMBER = 11
    final val _99THPERCENTILE_FIELD_NUMBER = 12
    final val _999THPERCENTILE_FIELD_NUMBER = 13
    def of(
      name: _root_.scala.Predef.String,
      count: _root_.scala.Long,
      meanRate: _root_.scala.Double,
      min: _root_.scala.Long,
      max: _root_.scala.Long,
      mean: _root_.scala.Double,
      median: _root_.scala.Double,
      stdDev: _root_.scala.Double,
      `75ThPercentile`: _root_.scala.Double,
      `95ThPercentile`: _root_.scala.Double,
      `98ThPercentile`: _root_.scala.Double,
      `99ThPercentile`: _root_.scala.Double,
      `999ThPercentile`: _root_.scala.Double
    ): _root_.com.intel.analytics.zoo.serving.grpc.MetricsReply.Metric = _root_.com.intel.analytics.zoo.serving.grpc.MetricsReply.Metric(
      name,
      count,
      meanRate,
      min,
      max,
      mean,
      median,
      stdDev,
      `75ThPercentile`,
      `95ThPercentile`,
      `98ThPercentile`,
      `99ThPercentile`,
      `999ThPercentile`
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[grpc.MetricsReply.Metric])
  }
  
  implicit class MetricsReplyLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.intel.analytics.zoo.serving.grpc.MetricsReply]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.intel.analytics.zoo.serving.grpc.MetricsReply](_l) {
    def metrics: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[com.intel.analytics.zoo.serving.grpc.MetricsReply.Metric]] = field(_.metrics)((c_, f_) => c_.copy(metrics = f_))
  }
  final val METRICS_FIELD_NUMBER = 1
  def of(
    metrics: _root_.scala.Seq[com.intel.analytics.zoo.serving.grpc.MetricsReply.Metric]
  ): _root_.com.intel.analytics.zoo.serving.grpc.MetricsReply = _root_.com.intel.analytics.zoo.serving.grpc.MetricsReply(
    metrics
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[grpc.MetricsReply])
}
