
// Generated by Akka gRPC. DO NOT EDIT.
package com.intel.analytics.zoo.serving.grpc

import akka.annotation.ApiMayChange


trait FrontEndGRPCService {
  
  /**
   * ping port
   */
  def ping(in: com.intel.analytics.zoo.serving.grpc.Empty): scala.concurrent.Future[com.intel.analytics.zoo.serving.grpc.StringReply]
  
  /**
   * metrics port
   */
  def getMetrics(in: com.intel.analytics.zoo.serving.grpc.Empty): scala.concurrent.Future[com.intel.analytics.zoo.serving.grpc.MetricsReply]
  
  /**
   * get models port
   */
  def getAllModels(in: com.intel.analytics.zoo.serving.grpc.Empty): scala.concurrent.Future[com.intel.analytics.zoo.serving.grpc.ModelsReply]
  
  /**
   * get models with model name port
   */
  def getModelsWithName(in: com.intel.analytics.zoo.serving.grpc.GetModelsWithNameReq): scala.concurrent.Future[com.intel.analytics.zoo.serving.grpc.ModelsReply]
  
  /**
   * get models with model name port
   */
  def getModelsWithNameAndVersion(in: com.intel.analytics.zoo.serving.grpc.GetModelsWithNameAndVersionReq): scala.concurrent.Future[com.intel.analytics.zoo.serving.grpc.ModelsReply]
  
}



object FrontEndGRPCService extends akka.grpc.ServiceDescription {
  val name = "grpc.FrontEndGRPCService"

  val descriptor: com.google.protobuf.Descriptors.FileDescriptor =
    com.intel.analytics.zoo.serving.grpc.FrontEndGRPCProto.javaDescriptor;

  object Serializers {
    import akka.grpc.scaladsl.ScalapbProtobufSerializer
    
    val EmptySerializer = new ScalapbProtobufSerializer(com.intel.analytics.zoo.serving.grpc.Empty.messageCompanion)
    
    val GetModelsWithNameReqSerializer = new ScalapbProtobufSerializer(com.intel.analytics.zoo.serving.grpc.GetModelsWithNameReq.messageCompanion)
    
    val GetModelsWithNameAndVersionReqSerializer = new ScalapbProtobufSerializer(com.intel.analytics.zoo.serving.grpc.GetModelsWithNameAndVersionReq.messageCompanion)
    
    val StringReplySerializer = new ScalapbProtobufSerializer(com.intel.analytics.zoo.serving.grpc.StringReply.messageCompanion)
    
    val MetricsReplySerializer = new ScalapbProtobufSerializer(com.intel.analytics.zoo.serving.grpc.MetricsReply.messageCompanion)
    
    val ModelsReplySerializer = new ScalapbProtobufSerializer(com.intel.analytics.zoo.serving.grpc.ModelsReply.messageCompanion)
    
  }

  @ApiMayChange
  object MethodDescriptors {
    import akka.grpc.internal.Marshaller
    import io.grpc.MethodDescriptor
    import Serializers._

    
    val pingDescriptor: MethodDescriptor[com.intel.analytics.zoo.serving.grpc.Empty, com.intel.analytics.zoo.serving.grpc.StringReply] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("grpc.FrontEndGRPCService", "Ping"))
        .setRequestMarshaller(new Marshaller(EmptySerializer))
        .setResponseMarshaller(new Marshaller(StringReplySerializer))
        .setSampledToLocalTracing(true)
        .build()
    
    val getMetricsDescriptor: MethodDescriptor[com.intel.analytics.zoo.serving.grpc.Empty, com.intel.analytics.zoo.serving.grpc.MetricsReply] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("grpc.FrontEndGRPCService", "GetMetrics"))
        .setRequestMarshaller(new Marshaller(EmptySerializer))
        .setResponseMarshaller(new Marshaller(MetricsReplySerializer))
        .setSampledToLocalTracing(true)
        .build()
    
    val getAllModelsDescriptor: MethodDescriptor[com.intel.analytics.zoo.serving.grpc.Empty, com.intel.analytics.zoo.serving.grpc.ModelsReply] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("grpc.FrontEndGRPCService", "GetAllModels"))
        .setRequestMarshaller(new Marshaller(EmptySerializer))
        .setResponseMarshaller(new Marshaller(ModelsReplySerializer))
        .setSampledToLocalTracing(true)
        .build()
    
    val getModelsWithNameDescriptor: MethodDescriptor[com.intel.analytics.zoo.serving.grpc.GetModelsWithNameReq, com.intel.analytics.zoo.serving.grpc.ModelsReply] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("grpc.FrontEndGRPCService", "GetModelsWithName"))
        .setRequestMarshaller(new Marshaller(GetModelsWithNameReqSerializer))
        .setResponseMarshaller(new Marshaller(ModelsReplySerializer))
        .setSampledToLocalTracing(true)
        .build()
    
    val getModelsWithNameAndVersionDescriptor: MethodDescriptor[com.intel.analytics.zoo.serving.grpc.GetModelsWithNameAndVersionReq, com.intel.analytics.zoo.serving.grpc.ModelsReply] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("grpc.FrontEndGRPCService", "GetModelsWithNameAndVersion"))
        .setRequestMarshaller(new Marshaller(GetModelsWithNameAndVersionReqSerializer))
        .setResponseMarshaller(new Marshaller(ModelsReplySerializer))
        .setSampledToLocalTracing(true)
        .build()
    
  }
}
