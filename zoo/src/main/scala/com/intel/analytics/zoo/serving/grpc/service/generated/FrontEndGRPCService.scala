
// Generated by Akka gRPC. DO NOT EDIT.
package com.intel.analytics.zoo.serving.grpc.service.generated

import akka.annotation.ApiMayChange


trait FrontEndGRPCService {
  
  /**
   * ping port
   */
  def ping(in: com.intel.analytics.zoo.serving.grpc.service.generated.Empty): scala.concurrent.Future[com.intel.analytics.zoo.serving.grpc.service.generated.StringReply]
  
  /**
   * metrics port
   */
  def getMetrics(in: com.intel.analytics.zoo.serving.grpc.service.generated.Empty): scala.concurrent.Future[com.intel.analytics.zoo.serving.grpc.service.generated.MetricsReply]
  
  /**
   * get models port
   */
  def getAllModels(in: com.intel.analytics.zoo.serving.grpc.service.generated.Empty): scala.concurrent.Future[com.intel.analytics.zoo.serving.grpc.service.generated.ModelsReply]
  
  /**
   * get models with model name port
   */
  def getModelsWithName(in: com.intel.analytics.zoo.serving.grpc.service.generated.GetModelsWithNameReq): scala.concurrent.Future[com.intel.analytics.zoo.serving.grpc.service.generated.ModelsReply]
  
  /**
   * get models with model name port
   */
  def getModelsWithNameAndVersion(in: com.intel.analytics.zoo.serving.grpc.service.generated.GetModelsWithNameAndVersionReq): scala.concurrent.Future[com.intel.analytics.zoo.serving.grpc.service.generated.ModelsReply]
  
  /**
   * predict
   */
  def predict(in: com.intel.analytics.zoo.serving.grpc.service.generated.PredictReq): scala.concurrent.Future[com.intel.analytics.zoo.serving.grpc.service.generated.PredictReply]
  
}



object FrontEndGRPCService extends akka.grpc.ServiceDescription {
  val name = "grpc.protos.FrontEndGRPCService"

  val descriptor: com.google.protobuf.Descriptors.FileDescriptor =
    com.intel.analytics.zoo.serving.grpc.service.generated.FrontEndGRPCProto.javaDescriptor;

  object Serializers {
    import akka.grpc.scaladsl.ScalapbProtobufSerializer
    
    val EmptySerializer = new ScalapbProtobufSerializer(com.intel.analytics.zoo.serving.grpc.service.generated.Empty.messageCompanion)
    
    val GetModelsWithNameReqSerializer = new ScalapbProtobufSerializer(com.intel.analytics.zoo.serving.grpc.service.generated.GetModelsWithNameReq.messageCompanion)
    
    val GetModelsWithNameAndVersionReqSerializer = new ScalapbProtobufSerializer(com.intel.analytics.zoo.serving.grpc.service.generated.GetModelsWithNameAndVersionReq.messageCompanion)
    
    val PredictReqSerializer = new ScalapbProtobufSerializer(com.intel.analytics.zoo.serving.grpc.service.generated.PredictReq.messageCompanion)
    
    val StringReplySerializer = new ScalapbProtobufSerializer(com.intel.analytics.zoo.serving.grpc.service.generated.StringReply.messageCompanion)
    
    val MetricsReplySerializer = new ScalapbProtobufSerializer(com.intel.analytics.zoo.serving.grpc.service.generated.MetricsReply.messageCompanion)
    
    val ModelsReplySerializer = new ScalapbProtobufSerializer(com.intel.analytics.zoo.serving.grpc.service.generated.ModelsReply.messageCompanion)
    
    val PredictReplySerializer = new ScalapbProtobufSerializer(com.intel.analytics.zoo.serving.grpc.service.generated.PredictReply.messageCompanion)
    
  }

  @ApiMayChange
  object MethodDescriptors {
    import akka.grpc.internal.Marshaller
    import io.grpc.MethodDescriptor
    import Serializers._

    
    val pingDescriptor: MethodDescriptor[com.intel.analytics.zoo.serving.grpc.service.generated.Empty, com.intel.analytics.zoo.serving.grpc.service.generated.StringReply] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("grpc.protos.FrontEndGRPCService", "Ping"))
        .setRequestMarshaller(new Marshaller(EmptySerializer))
        .setResponseMarshaller(new Marshaller(StringReplySerializer))
        .setSampledToLocalTracing(true)
        .build()
    
    val getMetricsDescriptor: MethodDescriptor[com.intel.analytics.zoo.serving.grpc.service.generated.Empty, com.intel.analytics.zoo.serving.grpc.service.generated.MetricsReply] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("grpc.protos.FrontEndGRPCService", "GetMetrics"))
        .setRequestMarshaller(new Marshaller(EmptySerializer))
        .setResponseMarshaller(new Marshaller(MetricsReplySerializer))
        .setSampledToLocalTracing(true)
        .build()
    
    val getAllModelsDescriptor: MethodDescriptor[com.intel.analytics.zoo.serving.grpc.service.generated.Empty, com.intel.analytics.zoo.serving.grpc.service.generated.ModelsReply] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("grpc.protos.FrontEndGRPCService", "GetAllModels"))
        .setRequestMarshaller(new Marshaller(EmptySerializer))
        .setResponseMarshaller(new Marshaller(ModelsReplySerializer))
        .setSampledToLocalTracing(true)
        .build()
    
    val getModelsWithNameDescriptor: MethodDescriptor[com.intel.analytics.zoo.serving.grpc.service.generated.GetModelsWithNameReq, com.intel.analytics.zoo.serving.grpc.service.generated.ModelsReply] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("grpc.protos.FrontEndGRPCService", "GetModelsWithName"))
        .setRequestMarshaller(new Marshaller(GetModelsWithNameReqSerializer))
        .setResponseMarshaller(new Marshaller(ModelsReplySerializer))
        .setSampledToLocalTracing(true)
        .build()
    
    val getModelsWithNameAndVersionDescriptor: MethodDescriptor[com.intel.analytics.zoo.serving.grpc.service.generated.GetModelsWithNameAndVersionReq, com.intel.analytics.zoo.serving.grpc.service.generated.ModelsReply] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("grpc.protos.FrontEndGRPCService", "GetModelsWithNameAndVersion"))
        .setRequestMarshaller(new Marshaller(GetModelsWithNameAndVersionReqSerializer))
        .setResponseMarshaller(new Marshaller(ModelsReplySerializer))
        .setSampledToLocalTracing(true)
        .build()
    
    val predictDescriptor: MethodDescriptor[com.intel.analytics.zoo.serving.grpc.service.generated.PredictReq, com.intel.analytics.zoo.serving.grpc.service.generated.PredictReply] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("grpc.protos.FrontEndGRPCService", "Predict"))
        .setRequestMarshaller(new Marshaller(PredictReqSerializer))
        .setResponseMarshaller(new Marshaller(PredictReplySerializer))
        .setSampledToLocalTracing(true)
        .build()
    
  }
}
